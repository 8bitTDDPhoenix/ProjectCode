
UartSerialAplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  000002d4  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ff3  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d6a  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a7  00000000  00000000  000021b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  0000265c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000604  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030f  00000000  00000000  00002d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000309b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	57 c0       	rjmp	.+174    	; 0x114 <__vector_25>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ed       	ldi	r30, 0xD4	; 212
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 33       	cpi	r26, 0x30	; 48
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	3f d0       	rcall	.+126    	; 0x18e <main>
 110:	df c0       	rjmp	.+446    	; 0x2d0 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <__vector_25>:
#include <util/delay.h>
#include "uart_int.h"


ISR(USART0_RX_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	0b b6       	in	r0, 0x3b	; 59
 120:	0f 92       	push	r0
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	4f 93       	push	r20
 128:	5f 93       	push	r21
 12a:	6f 93       	push	r22
 12c:	7f 93       	push	r23
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	char modtaget_tegn;

	// Aflæs UART modtager-register
	modtaget_tegn = UDR0;
 13a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	
	if (modtaget_tegn == '1')
 13e:	81 33       	cpi	r24, 0x31	; 49
 140:	49 f4       	brne	.+18     	; 0x154 <__vector_25+0x40>
	{	
		SendString("Command: ");
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	94 d0       	rcall	.+296    	; 0x270 <SendString>
		SendChar(modtaget_tegn);
 148:	81 e3       	ldi	r24, 0x31	; 49
 14a:	8a d0       	rcall	.+276    	; 0x260 <SendChar>
		SendString(" \nSystem now ON\r\n");
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	92 e0       	ldi	r25, 0x02	; 2
 150:	8f d0       	rcall	.+286    	; 0x270 <SendString>
 152:	0a c0       	rjmp	.+20     	; 0x168 <__vector_25+0x54>
	}
	if (modtaget_tegn == '0')
 154:	80 33       	cpi	r24, 0x30	; 48
	{
		SendString("Command: ");
 156:	41 f4       	brne	.+16     	; 0x168 <__vector_25+0x54>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	92 e0       	ldi	r25, 0x02	; 2
		SendChar(modtaget_tegn);
 15c:	89 d0       	rcall	.+274    	; 0x270 <SendString>
 15e:	80 e3       	ldi	r24, 0x30	; 48
		SendString(" \nSystem now OFF\r\n");
 160:	7f d0       	rcall	.+254    	; 0x260 <SendChar>
 162:	8c e1       	ldi	r24, 0x1C	; 28
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	84 d0       	rcall	.+264    	; 0x270 <SendString>
	}
	
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0b be       	out	0x3b, r0	; 59
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <main>:

int main()
{
	// Initier UART (med RX interrupt enable)
	InitUART(9600, 8, 1);  //Baudrate - Databit - Rx int enable
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	48 e0       	ldi	r20, 0x08	; 8
 192:	60 e8       	ldi	r22, 0x80	; 128
 194:	75 e2       	ldi	r23, 0x25	; 37
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 d0       	rcall	.+4      	; 0x1a0 <InitUART>
	
	// Global interrupt enable
	sei();
 19c:	78 94       	sei
 19e:	ff cf       	rjmp	.-2      	; 0x19e <main+0x10>

000001a0 <InitUART>:
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDR0;
}
 1a0:	cf 92       	push	r12
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	52 2f       	mov	r21, r18
 1ae:	8b 01       	movw	r16, r22
 1b0:	9c 01       	movw	r18, r24
 1b2:	0e 56       	subi	r16, 0x6E	; 110
 1b4:	11 09       	sbc	r17, r1
 1b6:	21 09       	sbc	r18, r1
 1b8:	31 09       	sbc	r19, r1
 1ba:	03 39       	cpi	r16, 0x93	; 147
 1bc:	11 4c       	sbci	r17, 0xC1	; 193
 1be:	21 40       	sbci	r18, 0x01	; 1
 1c0:	31 05       	cpc	r19, r1
 1c2:	08 f0       	brcs	.+2      	; 0x1c6 <InitUART+0x26>
 1c4:	46 c0       	rjmp	.+140    	; 0x252 <InitUART+0xb2>
 1c6:	45 50       	subi	r20, 0x05	; 5
 1c8:	44 30       	cpi	r20, 0x04	; 4
 1ca:	08 f0       	brcs	.+2      	; 0x1ce <InitUART+0x2e>
 1cc:	42 c0       	rjmp	.+132    	; 0x252 <InitUART+0xb2>
 1ce:	20 e2       	ldi	r18, 0x20	; 32
 1d0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 1d4:	28 e1       	ldi	r18, 0x18	; 24
 1d6:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 1da:	55 23       	and	r21, r21
 1dc:	29 f0       	breq	.+10     	; 0x1e8 <InitUART+0x48>
 1de:	e1 ec       	ldi	r30, 0xC1	; 193
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	20 81       	ld	r18, Z
 1e4:	20 68       	ori	r18, 0x80	; 128
 1e6:	20 83       	st	Z, r18
 1e8:	44 0f       	add	r20, r20
 1ea:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 1ee:	6b 01       	movw	r12, r22
 1f0:	7c 01       	movw	r14, r24
 1f2:	20 e8       	ldi	r18, 0x80	; 128
 1f4:	c2 0e       	add	r12, r18
 1f6:	24 e8       	ldi	r18, 0x84	; 132
 1f8:	d2 1e       	adc	r13, r18
 1fa:	2e e1       	ldi	r18, 0x1E	; 30
 1fc:	e2 1e       	adc	r14, r18
 1fe:	f1 1c       	adc	r15, r1
 200:	cc 0c       	add	r12, r12
 202:	dd 1c       	adc	r13, r13
 204:	ee 1c       	adc	r14, r14
 206:	ff 1c       	adc	r15, r15
 208:	cc 0c       	add	r12, r12
 20a:	dd 1c       	adc	r13, r13
 20c:	ee 1c       	adc	r14, r14
 20e:	ff 1c       	adc	r15, r15
 210:	cc 0c       	add	r12, r12
 212:	dd 1c       	adc	r13, r13
 214:	ee 1c       	adc	r14, r14
 216:	ff 1c       	adc	r15, r15
 218:	dc 01       	movw	r26, r24
 21a:	cb 01       	movw	r24, r22
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	aa 1f       	adc	r26, r26
 222:	bb 1f       	adc	r27, r27
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	aa 1f       	adc	r26, r26
 22a:	bb 1f       	adc	r27, r27
 22c:	9c 01       	movw	r18, r24
 22e:	ad 01       	movw	r20, r26
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	44 1f       	adc	r20, r20
 236:	55 1f       	adc	r21, r21
 238:	22 0f       	add	r18, r18
 23a:	33 1f       	adc	r19, r19
 23c:	44 1f       	adc	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	c7 01       	movw	r24, r14
 242:	b6 01       	movw	r22, r12
 244:	23 d0       	rcall	.+70     	; 0x28c <__udivmodsi4>
 246:	21 50       	subi	r18, 0x01	; 1
 248:	31 09       	sbc	r19, r1
 24a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 24e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	08 95       	ret

00000260 <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 260:	e0 ec       	ldi	r30, 0xC0	; 192
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	90 81       	ld	r25, Z
 266:	95 ff       	sbrs	r25, 5
 268:	fd cf       	rjmp	.-6      	; 0x264 <SendChar+0x4>
  {}
  // Then send the character
  UDR0 = Tegn;
 26a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 26e:	08 95       	ret

00000270 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 276:	88 81       	ld	r24, Y
 278:	88 23       	and	r24, r24
 27a:	29 f0       	breq	.+10     	; 0x286 <SendString+0x16>
 27c:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 27e:	f0 df       	rcall	.-32     	; 0x260 <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 280:	89 91       	ld	r24, Y+
 282:	81 11       	cpse	r24, r1
 284:	fc cf       	rjmp	.-8      	; 0x27e <SendString+0xe>
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <__udivmodsi4>:
 28c:	a1 e2       	ldi	r26, 0x21	; 33
 28e:	1a 2e       	mov	r1, r26
 290:	aa 1b       	sub	r26, r26
 292:	bb 1b       	sub	r27, r27
 294:	fd 01       	movw	r30, r26
 296:	0d c0       	rjmp	.+26     	; 0x2b2 <__udivmodsi4_ep>

00000298 <__udivmodsi4_loop>:
 298:	aa 1f       	adc	r26, r26
 29a:	bb 1f       	adc	r27, r27
 29c:	ee 1f       	adc	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	a2 17       	cp	r26, r18
 2a2:	b3 07       	cpc	r27, r19
 2a4:	e4 07       	cpc	r30, r20
 2a6:	f5 07       	cpc	r31, r21
 2a8:	20 f0       	brcs	.+8      	; 0x2b2 <__udivmodsi4_ep>
 2aa:	a2 1b       	sub	r26, r18
 2ac:	b3 0b       	sbc	r27, r19
 2ae:	e4 0b       	sbc	r30, r20
 2b0:	f5 0b       	sbc	r31, r21

000002b2 <__udivmodsi4_ep>:
 2b2:	66 1f       	adc	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	88 1f       	adc	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	1a 94       	dec	r1
 2bc:	69 f7       	brne	.-38     	; 0x298 <__udivmodsi4_loop>
 2be:	60 95       	com	r22
 2c0:	70 95       	com	r23
 2c2:	80 95       	com	r24
 2c4:	90 95       	com	r25
 2c6:	9b 01       	movw	r18, r22
 2c8:	ac 01       	movw	r20, r24
 2ca:	bd 01       	movw	r22, r26
 2cc:	cf 01       	movw	r24, r30
 2ce:	08 95       	ret

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
